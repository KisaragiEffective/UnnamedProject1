using System;
using System.Collections.Generic;
using System.Linq;
using KisaragiLockExpression.NDMFPlugin;
using nadena.dev.ndmf;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;
using VRC.SDK3.Avatars.Components;
using VRC.SDK3.Avatars.ScriptableObjects;

[assembly: ExportsPlugin(typeof(NDMFPlugin))]
namespace KisaragiLockExpression.NDMFPlugin
{
    public class NDMFPlugin : Plugin<NDMFPlugin>
    {
        private static bool checkTransition(AnimatorTransitionBase trans, Action<AnimatorCondition> inspector)
        {
            return trans.conditions.Any(cond =>
            {
                inspector(cond);
                return cond.parameter == "GestureLeft" || cond.parameter == "GestureRight";
            });
        }
        
        protected override void Configure()
        {
            InPhase(BuildPhase.Transforming).Run("Add expression-fixer for FX Layer", context =>
            {
                // baseAnimationLayersにFXレイヤーがある
                // specialAnimationLayersはTPose, IKPose, Sitting Pause
                // TODO: 真冬など組み込みで表情のロックを持っているアバターは処理をする必要がないのでreturnする
                var hasBuiltinLockParameters = false;
                if (hasBuiltinLockParameters)
                {
                    Debug.Log("The specified avatar has built-in lock parameter for fixing emotes, skipping this phase");
                    return;
                }
                var vrcAvatarDescriptor = context.AvatarDescriptor;
                if (!vrcAvatarDescriptor.customizeAnimationLayers)
                {
                    Debug.Log("customizeAnimationLayers is false, skipping this phase");
                    return;
                }
                var autoGeneratedParameterNameToLockTransition = "__KisaragiMarineAutoGen__GestureLock";
                var fx = vrcAvatarDescriptor.baseAnimationLayers.Single(cal => cal.type == VRCAvatarDescriptor.AnimLayerType.FX);
                if (fx.isDefault)
                {
                    // no need to run, because there's no FX to be applied
                    Debug.Log("isDefault is true, skipping this phase");
                    return;
                }

                // ReSharper disable once ConvertToConstant.Local
                var controller = ResolveLayerController(fx);
                controller.AddParameter(autoGeneratedParameterNameToLockTransition, AnimatorControllerParameterType.Bool);

                var transitionToBeModified1 = controller.layers.SelectMany(
                    layer => layer.stateMachine.states.SelectMany(
                        stateMachineVertex => stateMachineVertex.state.transitions.Where(
                            trans => checkTransition(trans, cond =>
                            {
                                /*
                                Debug.Log(
                                    $"{fx.type}/{layer.name}/{stateMachineVertex.state.name}/\"{trans.name}\"/({cond.parameter} {cond.mode} {cond.threshold}): check");
                                    */
                            }))));
                var transitionToBeModified2 = controller.layers.SelectMany(layer =>
                    layer.stateMachine.anyStateTransitions.Where(
                        trans => checkTransition(trans, cond =>
                        {
                            /*
                            Debug.Log(
                                $"{fx.type}/{layer.name}/$$$Any State$$$/\"$$$Any State$$$\"/({cond.parameter} {cond.mode} {cond.threshold}): check");
                                */
                        })));
                var transitionToBeModified =
                    new List<IEnumerable<AnimatorStateTransition>> { transitionToBeModified1, transitionToBeModified2 }
                        .SelectMany(chain =>
                            chain);
                    
                foreach (var stateTransition in transitionToBeModified)
                {
                    Debug.Log($"adding lock condition to {stateTransition.name}");
                    stateTransition.AddCondition(AnimatorConditionMode.IfNot, 0, autoGeneratedParameterNameToLockTransition);
                }

                var switchingParameter = new VRCExpressionsMenu.Control.Parameter
                {
                    name = autoGeneratedParameterNameToLockTransition
                };
                var switcher = new VRCExpressionsMenu.Control
                {
                    name = "Lock expression",
                    type = VRCExpressionsMenu.Control.ControlType.Toggle,
                    subParameters = new[] { switchingParameter }
                };
                vrcAvatarDescriptor.expressionsMenu.controls.Add(switcher);
            });
        }

        #region Adopted code from Non-Destructing Modular Framework

/*
 * MIT License
 *
 * Copyright (c) 2022 bd_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
        private const string SAMPLE_PATH_PACKAGE =
            "Packages/com.vrchat.avatars/Samples/AV3 Demo Assets/Animation/Controllers";

        private const string SAMPLE_PATH_LEGACY = "Assets/VRCSDK/Examples3/Animation/Controllers";

        private static AnimatorController ResolveLayerController(VRCAvatarDescriptor.CustomAnimLayer layer)
        {
            AnimatorController controller = null;

            if (!layer.isDefault && layer.animatorController != null &&
                layer.animatorController is AnimatorController c)
            {
                controller = c;
            }
            else
            {
                string name;
                switch (layer.type)
                {
                    case VRCAvatarDescriptor.AnimLayerType.Action:
                        name = "Action";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.Additive:
                        name = "Idle";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.Base:
                        name = "Locomotion";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.Gesture:
                        name = "Hands";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.Sitting:
                        name = "Sitting";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.FX:
                        name = "Face";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.TPose:
                        name = "UtilityTPose";
                        break;
                    case VRCAvatarDescriptor.AnimLayerType.IKPose:
                        name = "UtilityIKPose";
                        break;
                    default:
                        name = null;
                        break;
                }

                if (name != null)
                {
                    name = "/vrc_AvatarV3" + name + "Layer.controller";

                    controller = AssetDatabase.LoadAssetAtPath<AnimatorController>(SAMPLE_PATH_PACKAGE + name);
                    if (controller == null)
                    {
                        controller = AssetDatabase.LoadAssetAtPath<AnimatorController>(SAMPLE_PATH_LEGACY + name);
                    }
                }
            }

            return controller;
        }
        
        #endregion
    }
}